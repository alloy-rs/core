name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: test ${{ matrix.os }} ${{ matrix.rust }} ${{ matrix.flags }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        rust: [
          "stable", 
          "beta", 
          "nightly",
          "1.65" # MSRV
        ] 
        flags: [
          # No features
          "--no-default-features",
          # Default features
          ""
        ]
        include:
          # MSRV features
          - os: "ubuntu-latest"
            rust: "1.65" # MSRV
            flags: "--features json"
          - os: "windows-latest"
            rust: "1.65" # MSRV
            flags: "--features json"
          # All features
          - os: "ubuntu-latest"
            rust: "stable"
            flags: "--all-features"
          - os: "ubuntu-latest"
            rust: "beta"
            flags: "--all-features"
          - os: "ubuntu-latest"
            rust: "nightly"
            flags: "--all-features"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      # Only run tests on latest stable and above
      - name: build
        if: ${{ matrix.rust == '1.65' }} # MSRV
        run: cargo build --workspace ${{ matrix.flags }}
      - name: test
        if: ${{ matrix.rust != '1.65' }} # MSRV
        run: cargo test --workspace ${{ matrix.flags }}

  miri:
    name: miri ${{ matrix.flags }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        flags: ["--no-default-features", "", "--all-features"]
    env:
      MIRIFLAGS: -Zmiri-strict-provenance
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@miri
      - uses: Swatinem/rust-cache@v2
      - run: cargo miri test ${{ matrix.flags }}

  wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: check
        run: cargo check --workspace --target wasm32-unknown-unknown

  feature-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: cargo hack
        run: cargo hack check --feature-powerset --depth 2

  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - run: cargo clippy --workspace --all-targets --all-features
        env:
          RUSTFLAGS: -Dwarnings

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "--cfg docsrs -D warnings"

  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all --check
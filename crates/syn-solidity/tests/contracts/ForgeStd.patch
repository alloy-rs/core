--- a/crates/syn-solidity/tests/contracts/ForgeStd.sol
+++ b/crates/syn-solidity/tests/contracts/ForgeStd.sol
@@ -3132,7 +3132,7 @@ contract DSTest {
     bool private _failed;
 
     address constant HEVM_ADDRESS =
-        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));
+        address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));
 
     modifier mayRevert() { _; }
     modifier testopts(string memory) { _; }
@@ -4895,7 +4895,7 @@ library stdStorageSafe {
                     emit WARNING_UninitedSlot(who, uint256(reads[i]));
                 }
                 // store
-                vm.store(who, reads[i], bytes32(hex"1337"));
+                vm.store(who, reads[i], bytes32(hex "1337"));
                 bool success;
                 bytes memory rdat;
                 {
@@ -4903,7 +4903,7 @@ library stdStorageSafe {
                     fdat = bytesToBytes32(rdat, 32 * field_depth);
                 }
 
-                if (success && fdat == bytes32(hex"1337")) {
+                if (success && fdat == bytes32(hex "1337")) {
                     // we found which of the slots is the actual one
                     emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));
                     self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);
@@ -6166,8 +6166,8 @@ interface IMulticall3 {
 
 abstract contract StdUtils {
     /*//////////////////////////////////////////////////////////////////////////
-                                     CONSTANTS
-    //////////////////////////////////////////////////////////////////////////*/
+                                        CONSTANTS
+    ////////////////////////////////////////////////////////////////////////// */
 
     IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
@@ -6183,8 +6183,8 @@ abstract contract StdUtils {
     address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
 
     /*//////////////////////////////////////////////////////////////////////////
-                                 INTERNAL FUNCTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+                                    INTERNAL FUNCTIONS
+    ////////////////////////////////////////////////////////////////////////// */
 
     function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
         require(min <= max, "StdUtils bound(uint256,uint256,uint256): Max is less than min.");
@@ -6335,8 +6335,8 @@ abstract contract StdUtils {
     }
 
     /*//////////////////////////////////////////////////////////////////////////
-                                 PRIVATE FUNCTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+                                    PRIVATE FUNCTIONS
+    ////////////////////////////////////////////////////////////////////////// */
 
     function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
         return address(uint160(uint256(bytesValue)));
@@ -6358,18 +6358,18 @@ abstract contract StdUtils {
 library StdStyle {
     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
 
-    string constant RED = "\u001b[91m";
-    string constant GREEN = "\u001b[92m";
-    string constant YELLOW = "\u001b[93m";
-    string constant BLUE = "\u001b[94m";
-    string constant MAGENTA = "\u001b[95m";
-    string constant CYAN = "\u001b[96m";
-    string constant BOLD = "\u001b[1m";
-    string constant DIM = "\u001b[2m";
-    string constant ITALIC = "\u001b[3m";
-    string constant UNDERLINE = "\u001b[4m";
-    string constant INVERSE = "\u001b[7m";
-    string constant RESET = "\u001b[0m";
+    string constant RED = "001b[91m";
+    string constant GREEN = "001b[92m";
+    string constant YELLOW = "001b[93m";
+    string constant BLUE = "001b[94m";
+    string constant MAGENTA = "001b[95m";
+    string constant CYAN = "001b[96m";
+    string constant BOLD = "001b[1m";
+    string constant DIM = "001b[2m";
+    string constant ITALIC = "001b[3m";
+    string constant UNDERLINE = "001b[4m";
+    string constant INVERSE = "001b[7m";
+    string constant RESET = "001b[0m";
 
     function styleConcat(string memory style, string memory self) private pure returns (string memory) {
         return string(abi.encodePacked(style, self, RESET));

--- a/crates/syn-solidity/tests/contracts/PrbMath.sol
+++ b/crates/syn-solidity/tests/contracts/PrbMath.sol
@@ -5,7 +5,7 @@
 
 /*//////////////////////////////////////////////////////////////////////////
                                 CUSTOM ERRORS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 /// @notice Thrown when the resultant value in {mulDiv} overflows uint256.
 error PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);
@@ -21,7 +21,7 @@ error PRBMath_MulDivSigned_Overflow(int256 x, int256 y);
 
 /*//////////////////////////////////////////////////////////////////////////
                                     CONSTANTS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 /// @dev The maximum value a uint128 number can have.
 uint128 constant MAX_UINT128 = type(uint128).max;
@@ -41,7 +41,7 @@ uint256 constant UNIT_LPOTD = 262144;
 
 /*//////////////////////////////////////////////////////////////////////////
                                     FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 /// @notice Calculates the binary exponent of x using the binary fraction method.
 /// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.
@@ -1094,7 +1094,7 @@ UD60x18 constant ZERO = UD60x18.wrap(0);
 
 /*//////////////////////////////////////////////////////////////////////////
                             MATHEMATICAL FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 /// @notice Calculates the arithmetic average of x and y using the following formula:
 ///
@@ -1651,7 +1651,7 @@ type UD60x18 is uint256;
 
 /*//////////////////////////////////////////////////////////////////////////
                                     CASTING
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Casting.intoSD1x18,
@@ -1665,7 +1665,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                             MATHEMATICAL FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 // The global "using for" directive makes the functions in this library callable on the UD60x18 type.
 using {
@@ -1689,7 +1689,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                                 HELPER FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 // The global "using for" directive makes the functions in this library callable on the UD60x18 type.
 using {
@@ -1715,7 +1715,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                                     OPERATORS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 // The global "using for" directive makes it possible to use these operators on the UD60x18 type.
 using {
@@ -1804,7 +1804,7 @@ type UD2x18 is uint64;
 
 /*//////////////////////////////////////////////////////////////////////////
                                     CASTING
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Casting.intoSD1x18,
@@ -2737,7 +2737,7 @@ type SD59x18 is int256;
 
 /*//////////////////////////////////////////////////////////////////////////
                                     CASTING
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Casting.intoInt256,
@@ -2752,7 +2752,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                             MATHEMATICAL FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Math.abs,
@@ -2776,7 +2776,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                                 HELPER FUNCTIONS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Helpers.add,
@@ -2802,7 +2802,7 @@ using {
 
 /*//////////////////////////////////////////////////////////////////////////
                                     OPERATORS
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 // The global "using for" directive makes it possible to use these operators on the SD59x18 type.
 using {
@@ -2911,7 +2911,7 @@ type SD1x18 is int64;
 
 /*//////////////////////////////////////////////////////////////////////////
                                     CASTING
-//////////////////////////////////////////////////////////////////////////*/
+////////////////////////////////////////////////////////////////////////// */
 
 using {
     Casting.intoSD59x18,
@@ -4138,7 +4138,7 @@ interface Vm is VmSafe {
 contract PRBTest {
     /*//////////////////////////////////////////////////////////////////////////
                                     EVENTS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
     event Log(string err);
     event LogAddress(address value);
     event LogArray(address[] value);
@@ -4167,7 +4167,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                     CONSTANTS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev A flag to indicate that this is a test contract.
     function IS_TEST() external pure virtual returns (bool) {
@@ -4185,7 +4185,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                     CHEATCODES
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev The virtual address of the Foundry VM.
     address internal constant VM_ADDRESS = address(uint160(uint256(keccak256("hevm cheat code"))));
@@ -4195,7 +4195,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 FAILURE SYSTEM
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev This instance's failure flag.
     bool private _failed;
@@ -4253,7 +4253,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 BOOLEAN ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that `condition` evaluates to `true`. If it does not, the test fails.
     function assertTrue(bool condition) internal virtual {
@@ -4283,7 +4283,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 EQUALITY ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that `a` and `b` are equal. If they are not, the test fails.
     function assertEq(address a, address b) internal virtual {
@@ -4537,7 +4537,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 INEQUALITY ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that `a` and `b` are not equal. If they are, the test fails.
     function assertNotEq(address a, address b) internal virtual {
@@ -4791,7 +4791,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 APPROXIMATE ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that the absolute difference between `a and `b` is less than or equal to `maxDelta`.
     /// If it is not, the test fails.
@@ -4841,7 +4841,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                             NUMERICAL COMPARISON ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that `a` is greater than `b`. If it is not, the test fails.
     function assertGt(int256 a, int256 b) internal virtual {
@@ -4989,7 +4989,7 @@ contract PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                 CONTAINMENT ASSERTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Tests that `a` contains `b`. If it does not, the test fails.
     function assertContains(address[] memory a, address b) internal virtual {
@@ -5085,7 +5085,7 @@ contract PRBTest {
 contract PRBMathAssertions is PRBTest {
     /*//////////////////////////////////////////////////////////////////////////
                                        SD1X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function assertEq(SD1x18 a, SD1x18 b) internal {
         assertEq(SD1x18.unwrap(a), SD1x18.unwrap(b));
@@ -5173,7 +5173,7 @@ contract PRBMathAssertions is PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                        SD59X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function assertEq(SD59x18 a, SD59x18 b) internal {
         assertEq(SD59x18.unwrap(a), SD59x18.unwrap(b));
@@ -5253,7 +5253,7 @@ contract PRBMathAssertions is PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                        UD2X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function assertEq(UD2x18 a, UD2x18 b) internal {
         assertEq(UD2x18.unwrap(a), UD2x18.unwrap(b));
@@ -5341,7 +5341,7 @@ contract PRBMathAssertions is PRBTest {
 
     /*//////////////////////////////////////////////////////////////////////////
                                        UD60X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function assertEq(UD60x18 a, UD60x18 b) internal {
         assertEq(UD60x18.unwrap(a), UD60x18.unwrap(b));
@@ -5992,7 +5992,7 @@ interface Vm is VmSafe {
 abstract contract StdUtils {
     /*//////////////////////////////////////////////////////////////////////////
                                      CONSTANTS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
@@ -6009,7 +6009,7 @@ abstract contract StdUtils {
 
     /*//////////////////////////////////////////////////////////////////////////
                                  INTERNAL FUNCTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
         require(min <= max, "StdUtils bound(uint256,uint256,uint256): Max is less than min.");
@@ -6161,7 +6161,7 @@ abstract contract StdUtils {
 
     /*//////////////////////////////////////////////////////////////////////////
                                  PRIVATE FUNCTIONS
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
         return address(uint160(uint256(bytesValue)));
@@ -6183,7 +6183,7 @@ abstract contract StdUtils {
 contract PRBMathUtils is StdUtils {
     /*//////////////////////////////////////////////////////////////////////////
                                       SD1x18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Helper function to bound an SD1x18 number, which console logs the bounded result.
     function bound(SD1x18 x, SD1x18 min, SD1x18 max) internal view returns (SD1x18) {
@@ -6227,7 +6227,7 @@ contract PRBMathUtils is StdUtils {
 
     /*//////////////////////////////////////////////////////////////////////////
                                       SD59X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Helper function to bound an SD59x18 number, which console logs the bounded result.
     function bound(SD59x18 x, SD59x18 min, SD59x18 max) internal view returns (SD59x18) {
@@ -6271,7 +6271,7 @@ contract PRBMathUtils is StdUtils {
 
     /*//////////////////////////////////////////////////////////////////////////
                                       UD2x18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Helper function to bound a UD2x18 number, which console logs the bounded result.
     function bound(UD2x18 x, UD2x18 min, UD2x18 max) internal view returns (UD2x18) {
@@ -6315,7 +6315,7 @@ contract PRBMathUtils is StdUtils {
 
     /*//////////////////////////////////////////////////////////////////////////
                                       UD60X18
-    //////////////////////////////////////////////////////////////////////////*/
+    ////////////////////////////////////////////////////////////////////////// */
 
     /// @dev Helper function to bound a UD60x18 number, which console logs the bounded result.
     function bound(UD60x18 x, UD60x18 min, UD60x18 max) internal view returns (UD60x18) {

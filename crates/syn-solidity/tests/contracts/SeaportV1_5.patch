--- a/crates/syn-solidity/tests/contracts/SeaportV1_5.sol
+++ b/crates/syn-solidity/tests/contracts/SeaportV1_5.sol
@@ -16157,9 +16157,6 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                   successfully fulfilled.
      */
     function fulfillOrder(
-        /**
-         * @custom:name order
-         */
         Order calldata,
         bytes32 fulfillerConduitKey
     ) external payable override returns (bool fulfilled) {
@@ -16216,13 +16213,7 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                   successfully fulfilled.
      */
     function fulfillAdvancedOrder(
-        /**
-         * @custom:name advancedOrder
-         */
         AdvancedOrder calldata,
-        /**
-         * @custom:name criteriaResolvers
-         */
         CriteriaResolver[] calldata,
         bytes32 fulfillerConduitKey,
         address recipient
@@ -16292,17 +16283,8 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                         orders.
      */
     function fulfillAvailableOrders(
-        /**
-         * @custom:name orders
-         */
         Order[] calldata,
-        /**
-         * @custom:name offerFulfillments
-         */
         FulfillmentComponent[][] calldata,
-        /**
-         * @custom:name considerationFulfillments
-         */
         FulfillmentComponent[][] calldata,
         bytes32 fulfillerConduitKey,
         uint256 maximumFulfilled
@@ -16402,21 +16384,9 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                         orders.
      */
     function fulfillAvailableAdvancedOrders(
-        /**
-         * @custom:name advancedOrders
-         */
         AdvancedOrder[] calldata,
-        /**
-         * @custom:name criteriaResolvers
-         */
         CriteriaResolver[] calldata,
-        /**
-         * @custom:name offerFulfillments
-         */
         FulfillmentComponent[][] calldata,
-        /**
-         * @custom:name considerationFulfillments
-         */
         FulfillmentComponent[][] calldata,
         bytes32 fulfillerConduitKey,
         address recipient,
@@ -16470,13 +16440,7 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                    tokens will not be reflected as part of this array.
      */
     function matchOrders(
-        /**
-         * @custom:name orders
-         */
         Order[] calldata,
-        /**
-         * @custom:name fulfillments
-         */
         Fulfillment[] calldata
     ) external payable override returns (Execution[] memory /* executions */ ) {
         // Convert to advanced, validate, and match orders using fulfillments.
@@ -16541,17 +16505,8 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                     array.
      */
     function matchAdvancedOrders(
-        /**
-         * @custom:name advancedOrders
-         */
         AdvancedOrder[] calldata,
-        /**
-         * @custom:name criteriaResolvers
-         */
         CriteriaResolver[] calldata,
-        /**
-         * @custom:name fulfillments
-         */
         Fulfillment[] calldata,
         address recipient
     ) external payable override returns (Execution[] memory /* executions */ ) {
@@ -16598,9 +16553,6 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      *                   been successfully validated.
      */
     function validate(
-        /**
-         * @custom:name orders
-         */
         Order[] calldata
     ) external override returns (bool /* validated */ ) {
         return _validate(_toOrdersReturnType(_decodeOrders)(CalldataStart.pptr()));
@@ -16627,9 +16579,6 @@ contract Consideration is ConsiderationInterface, OrderCombiner {
      * @return orderHash The order hash.
      */
     function getOrderHash(
-        /**
-         * @custom:name order
-         */
         OrderComponents calldata
     ) external view override returns (bytes32 orderHash) {
         CalldataPointer orderPointer = CalldataStart.pptr();
